{"ast":null,"code":"import Tool from \"./Tool\";\nexport default class Rect extends Tool {\n  constructor(canvas, socket, id) {\n    super(canvas, socket, id);\n    this.listen();\n  }\n  listen() {\n    this.canvas.onmouseup = this.mouseUpHandler.bind(this);\n    this.canvas.onmousedown = this.mouseDownHandler.bind(this);\n    this.canvas.onmousemove = this.mouseMoveHandler.bind(this);\n  }\n  mouseUpHandler(e) {\n    this.mouseDown = false;\n    this.socket.send(JSON.stringify({\n      method: 'draw',\n      id: this.id,\n      figure: {\n        type: 'rect',\n        x: this.startX,\n        y: this.startY,\n        width: this.width,\n        height: this.height,\n        color: this.ctx.fillStyle\n      }\n    }));\n  }\n  mouseDownHandler(e) {\n    this.mouseDown = true;\n    this.ctx.beginPath(); // говорить про те що ми почали малювати нову лінію\n    this.startX = e.pageX - e.target.offsetLeft; // Вираховує позицію миші по осі X, віднімаючи від неї відстань від краю сторінки до початку канваса.\n    this.startY = e.pageY - e.target.offsetTop; // Аналогічно для осі Y — обчислює вертикальну позицію миші на канвасі.\n    this.saved = this.canvas.toDataURL(); // Зберігаємо зображення з канвасу\n  }\n  mouseMoveHandler(e) {\n    if (this.mouseDown) {\n      let currentX = e.pageX - e.target.offsetLeft;\n      let currentY = e.pageY - e.target.offsetTop;\n      this.width = currentX - this.startX;\n      this.height = currentY - this.startY;\n      this.draw(this.startX, this.startY, this.width, this.height);\n    }\n  }\n  draw(x, y, w, h) {\n    const img = new Image();\n    img.src = this.saved;\n    // Спрацьовує тоді коли зображення встановлено, асинхронна функція\n    img.onload = () => {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // Очищаємо канвас від тих фігур які ми намалювали, щоб бачити лише поточний обєкт\n      this.ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height); // Через те що ми очищаємо весь канвас, нам потрібно повернути старі малюнки,тому ми зберіг img\n      this.ctx.beginPath(); // говорить про те що ми почали малювати нову лінію\n      this.ctx.rect(x, y, w, h);\n      this.ctx.fill();\n      this.ctx.stroke();\n    };\n  }\n  static staticDraw(ctx, x, y, w, h, color) {\n    ctx.fillStyle = color;\n    ctx.beginPath(); // говорить про те що ми почали малювати нову лінію\n    ctx.rect(x, y, w, h);\n    ctx.fill();\n    ctx.stroke();\n  }\n}\n\n// у цьому класі дії приблизно такі самі з нажиманням на кнопки, тільки різниця в муві і обчисленні того, що ми робимо\n// спершу коли ми нажимаємо на кнопку отримаємо початкові координати курсора\n// потім коли рухаємо рахується координати current ( поточні ) , обчислюємо різницю і це буде висотою та шириною відповідно\n// та передаємо їх у функцію draw, де вона приймає x y w h та малює наш прямокутник, заповнює та малює контур, за це відповідає stroke","map":{"version":3,"names":["Tool","Rect","constructor","canvas","socket","id","listen","onmouseup","mouseUpHandler","bind","onmousedown","mouseDownHandler","onmousemove","mouseMoveHandler","e","mouseDown","send","JSON","stringify","method","figure","type","x","startX","y","startY","width","height","color","ctx","fillStyle","beginPath","pageX","target","offsetLeft","pageY","offsetTop","saved","toDataURL","currentX","currentY","draw","w","h","img","Image","src","onload","clearRect","drawImage","rect","fill","stroke","staticDraw"],"sources":["/Users/romanmac/WebstormProjects/paint/client/src/tools/Rect.js"],"sourcesContent":["import Tool from \"./Tool\";\n\nexport default class Rect extends Tool {\n    constructor(canvas, socket, id) {\n        super(canvas, socket, id);\n        this.listen();\n    }\n\n    listen() {\n        this.canvas.onmouseup = this.mouseUpHandler.bind(this);\n        this.canvas.onmousedown = this.mouseDownHandler.bind(this);\n        this.canvas.onmousemove = this.mouseMoveHandler.bind(this);\n    }\n    \n    mouseUpHandler(e) {\n        this.mouseDown = false;\n        this.socket.send(JSON.stringify({\n            method: 'draw',\n            id: this.id,\n            figure: {\n                type: 'rect',\n                x: this.startX,\n                y: this.startY,\n                width: this.width,\n                height: this.height,\n                color: this.ctx.fillStyle,\n            }\n        }))\n    }\n\n    mouseDownHandler(e) {\n        this.mouseDown = true;\n        this.ctx.beginPath(); // говорить про те що ми почали малювати нову лінію\n        this.startX = e.pageX - e.target.offsetLeft; // Вираховує позицію миші по осі X, віднімаючи від неї відстань від краю сторінки до початку канваса.\n        this.startY = e.pageY - e.target.offsetTop; // Аналогічно для осі Y — обчислює вертикальну позицію миші на канвасі.\n        this.saved = this.canvas.toDataURL(); // Зберігаємо зображення з канвасу\n    }\n\n    mouseMoveHandler(e) {\n        if (this.mouseDown) {\n            let currentX = e.pageX - e.target.offsetLeft;\n            let currentY = e.pageY - e.target.offsetTop;\n            this.width = currentX - this.startX;\n            this.height = currentY - this.startY;\n            this.draw(this.startX, this.startY, this.width, this.height);\n        }\n    }\n\n    draw(x, y, w, h) {\n        const img = new Image();\n        img.src = this.saved\n        // Спрацьовує тоді коли зображення встановлено, асинхронна функція\n        img.onload = () => {\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // Очищаємо канвас від тих фігур які ми намалювали, щоб бачити лише поточний обєкт\n            this.ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height); // Через те що ми очищаємо весь канвас, нам потрібно повернути старі малюнки,тому ми зберіг img\n            this.ctx.beginPath(); // говорить про те що ми почали малювати нову лінію\n            this.ctx.rect(x, y, w, h);\n            this.ctx.fill();\n            this.ctx.stroke();\n        }\n    }\n\n    static staticDraw(ctx, x, y, w, h, color) {\n        ctx.fillStyle = color;\n        ctx.beginPath(); // говорить про те що ми почали малювати нову лінію\n        ctx.rect(x, y, w, h);\n        ctx.fill();\n        ctx.stroke();\n    }\n}\n\n// у цьому класі дії приблизно такі самі з нажиманням на кнопки, тільки різниця в муві і обчисленні того, що ми робимо\n// спершу коли ми нажимаємо на кнопку отримаємо початкові координати курсора\n// потім коли рухаємо рахується координати current ( поточні ) , обчислюємо різницю і це буде висотою та шириною відповідно\n// та передаємо їх у функцію draw, де вона приймає x y w h та малює наш прямокутник, заповнює та малює контур, за це відповідає stroke\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}