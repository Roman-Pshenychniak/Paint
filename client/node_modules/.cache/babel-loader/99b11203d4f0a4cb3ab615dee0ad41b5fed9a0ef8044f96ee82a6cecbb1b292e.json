{"ast":null,"code":"import Tool from \"./Tool\";\nexport default class Line extends Tool {\n  constructor(canvas) {\n    super(canvas);\n    this.listen();\n    this.ctx.strokeStyle = \"black\";\n  }\n  listen() {\n    this.canvas.onmouseup = this.mouseUpHandler.bind(this);\n    this.canvas.onmousedown = this.mouseDownHandler.bind(this);\n    this.canvas.onmousemove = this.mouseMoveHandler.bind(this);\n  }\n  mouseUpHandler(e) {\n    if (this.mouseDown) {\n      //this.draw(e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop);\n      // отримуємо координати курсора мишки\n\n      this.socket.send(JSON.stringify({\n        method: 'draw',\n        id: this.id,\n        figure: {\n          type: 'brush',\n          x: e.pageX - e.target.offsetLeft,\n          y: e.pageY - e.target.offsetTop,\n          color: this.ctx.fillStyle,\n          stroke: this.ctx.strokeStyle,\n          lineWidth: this.ctx.lineWidth\n        }\n      }));\n    }\n  }\n  mouseDownHandler(e) {\n    this.mouseDown = true;\n    this.ctx.beginPath(); // говорить про те що ми почали малювати нову лінію\n    this.startX = e.pageX - e.target.offsetLeft; // Вираховує позицію миші по осі X, віднімаючи від неї відстань від краю сторінки до початку канваса.\n    this.startY = e.pageY - e.target.offsetTop; // Аналогічно для осі Y — обчислює вертикальну позицію миші на канвасі.\n    this.saved = this.canvas.toDataURL(); // Зберігаємо зображення з канвасу\n  }\n  mouseMoveHandler(e) {\n    if (this.mouseDown) {\n      this.endX = e.pageX - e.target.offsetLeft;\n      this.endY = e.pageY - e.target.offsetTop;\n      this.draw(this.startX, this.startY, this.endX, this.endY);\n    }\n  }\n  draw(startX, startY, endX, endY) {\n    const img = new Image();\n    img.src = this.saved;\n    // Спрацьовує тоді коли зображення встановлено, асинхронна функція\n    img.onload = () => {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // Очищаємо канвас від тих фігур які ми намалювали, щоб бачити лише поточний обєкт\n      this.ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height); // Через те що ми очищаємо весь канвас, нам потрібно повернути старі малюнки,тому ми зберіг img\n      this.ctx.beginPath(); // говорить про те що ми почали малювати нову лінію\n      this.ctx.moveTo(startX, startY); // встановлюємо початкову точку\n      this.ctx.lineTo(endX, endY); // визначаємо останню точку\n      this.ctx.stroke(); // малюємо лінію\n    };\n  }\n  static staticDraw(ctx, startX, startY, endX, endY, color, stroke, lineWidth) {\n    ctx.fillStyle = color;\n    ctx.strokeStyle = stroke;\n    ctx.lineWidth = lineWidth;\n    ctx.beginPath(); // говорить про те що ми почали малювати нову лінію\n    ctx.moveTo(startX, startY); // встановлюємо початкову точку\n    ctx.lineTo(endX, endY); // визначаємо останню точку\n    ctx.stroke(); // малюємо лінію\n  }\n}\n\n// у цьому класі малюємо лінію, обчислюємо початкову координату та кінцеву та викликаємо функцію , яка малює лінію між цими двома точками\n// вся інша логіка та сама, що і в інших тулах","map":{"version":3,"names":["Tool","Line","constructor","canvas","listen","ctx","strokeStyle","onmouseup","mouseUpHandler","bind","onmousedown","mouseDownHandler","onmousemove","mouseMoveHandler","e","mouseDown","socket","send","JSON","stringify","method","id","figure","type","x","pageX","target","offsetLeft","y","pageY","offsetTop","color","fillStyle","stroke","lineWidth","beginPath","startX","startY","saved","toDataURL","endX","endY","draw","img","Image","src","onload","clearRect","width","height","drawImage","moveTo","lineTo","staticDraw"],"sources":["/Users/romanmac/WebstormProjects/paint/client/src/tools/Line.js"],"sourcesContent":["import Tool from \"./Tool\";\n\nexport default class Line extends Tool {\n    constructor(canvas) {\n        super(canvas);\n        this.listen();\n        this.ctx.strokeStyle = \"black\";\n    }\n\n    listen() {\n        this.canvas.onmouseup = this.mouseUpHandler.bind(this);\n        this.canvas.onmousedown = this.mouseDownHandler.bind(this);\n        this.canvas.onmousemove = this.mouseMoveHandler.bind(this);\n    }\n\n    mouseUpHandler(e) {\n        if (this.mouseDown) {\n            //this.draw(e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop);\n            // отримуємо координати курсора мишки\n\n            this.socket.send(JSON.stringify({\n                method: 'draw',\n                id: this.id,\n                figure: {\n                    type: 'brush',\n                    x: e.pageX - e.target.offsetLeft,\n                    y: e.pageY - e.target.offsetTop,\n                    color: this.ctx.fillStyle,\n                    stroke: this.ctx.strokeStyle,\n                    lineWidth: this.ctx.lineWidth,\n                }\n            }))\n        }\n    }\n\n    mouseDownHandler(e) {\n        this.mouseDown = true;\n        this.ctx.beginPath(); // говорить про те що ми почали малювати нову лінію\n        this.startX = e.pageX - e.target.offsetLeft; // Вираховує позицію миші по осі X, віднімаючи від неї відстань від краю сторінки до початку канваса.\n        this.startY = e.pageY - e.target.offsetTop; // Аналогічно для осі Y — обчислює вертикальну позицію миші на канвасі.\n        this.saved = this.canvas.toDataURL(); // Зберігаємо зображення з канвасу\n    }\n\n    mouseMoveHandler(e) {\n        if (this.mouseDown) {\n            this.endX = e.pageX - e.target.offsetLeft;\n            this.endY = e.pageY - e.target.offsetTop;\n            this.draw(this.startX, this.startY, this.endX, this.endY);\n        }\n    }\n\n    draw(startX, startY, endX, endY) {\n        const img = new Image();\n        img.src = this.saved\n        // Спрацьовує тоді коли зображення встановлено, асинхронна функція\n        img.onload = () => {\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // Очищаємо канвас від тих фігур які ми намалювали, щоб бачити лише поточний обєкт\n            this.ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height); // Через те що ми очищаємо весь канвас, нам потрібно повернути старі малюнки,тому ми зберіг img\n            this.ctx.beginPath(); // говорить про те що ми почали малювати нову лінію\n            this.ctx.moveTo(startX, startY); // встановлюємо початкову точку\n            this.ctx.lineTo(endX, endY); // визначаємо останню точку\n            this.ctx.stroke(); // малюємо лінію\n        }\n    }\n\n    static staticDraw(ctx, startX, startY, endX, endY, color, stroke, lineWidth) {\n        ctx.fillStyle = color;\n        ctx.strokeStyle = stroke;\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath(); // говорить про те що ми почали малювати нову лінію\n        ctx.moveTo(startX, startY); // встановлюємо початкову точку\n        ctx.lineTo(endX, endY); // визначаємо останню точку\n        ctx.stroke(); // малюємо лінію\n    }\n}\n\n// у цьому класі малюємо лінію, обчислюємо початкову координату та кінцеву та викликаємо функцію , яка малює лінію між цими двома точками\n// вся інша логіка та сама, що і в інших тулах\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}