{"ast":null,"code":"import Tool from \"./Tool\";\nexport default class Line extends Tool {\n  constructor(canvas) {\n    super(canvas);\n    this.listen();\n  }\n  listen() {\n    this.canvas.onmouseup = this.mouseUpHandler.bind(this);\n    this.canvas.onmousedown = this.mouseDownHandler.bind(this);\n    this.canvas.onmousemove = this.mouseMoveHandler.bind(this);\n  }\n  mouseUpHandler(e) {\n    this.mouseDown = false;\n  }\n  mouseDownHandler(e) {\n    this.mouseDown = true;\n    this.ctx.beginPath(); // говорить про те що ми почали малювати нову лінію\n    this.startX = e.pageX - e.target.offsetLeft; // Вираховує позицію миші по осі X, віднімаючи від неї відстань від краю сторінки до початку канваса.\n    this.startY = e.pageY - e.target.offsetTop; // Аналогічно для осі Y — обчислює вертикальну позицію миші на канвасі.\n    this.saved = this.canvas.toDataURL(); // Зберігаємо зображення з канвасу\n  }\n  mouseMoveHandler(e) {\n    if (this.mouseDown) {\n      this.endX = e.pageX - e.target.offsetLeft;\n      this.endY = e.pageY - e.target.offsetTop;\n      this.draw(this.startX, this.startY, this.endX, this.endY);\n    }\n  }\n  draw(startX, startY, endX, endY) {\n    const img = new Image();\n    img.src = this.saved;\n    // Спрацьовує тоді коли зображення встановлено, асинхронна функція\n    img.onload = () => {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // Очищаємо канвас від тих фігур які ми намалювали, щоб бачити лише поточний обєкт\n      this.ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height); // Через те що ми очищаємо весь канвас, нам потрібно повернути старі малюнки,тому ми зберіг img\n      this.ctx.beginPath(); // говорить про те що ми почали малювати нову лінію\n      this.ctx.moveTo(startX, startY); // встановлюємо початкову точку\n      this.ctx.lineTo(endX, endY); // визначаємо останню точку\n      this.ctx.stroke(); // малюємо лінію\n    };\n  }\n}\n\n// у цьому класі дії приблизно такі самі з нажиманням на кнопки, тільки різниця в муві і обчисленні того, що ми робимо\n// спершу коли ми нажимаємо на кнопку отримаємо початкові координати курсора\n// потім коли рухаємо рахується координати current ( поточні ) , обчислюємо різницю і це буде висотою та шириною відповідно\n// та передаємо їх у функцію draw, де вона приймає x y w h та малює наш прямокутник, заповнює та малює контур, за це відповідає stroke","map":{"version":3,"names":["Tool","Line","constructor","canvas","listen","onmouseup","mouseUpHandler","bind","onmousedown","mouseDownHandler","onmousemove","mouseMoveHandler","e","mouseDown","ctx","beginPath","startX","pageX","target","offsetLeft","startY","pageY","offsetTop","saved","toDataURL","endX","endY","draw","img","Image","src","onload","clearRect","width","height","drawImage","moveTo","lineTo","stroke"],"sources":["/Users/romanmac/WebstormProjects/paint/src/tools/Line.js"],"sourcesContent":["import Tool from \"./Tool\";\n\nexport default class Line extends Tool {\n    constructor(canvas) {\n        super(canvas);\n        this.listen();\n    }\n\n    listen() {\n        this.canvas.onmouseup = this.mouseUpHandler.bind(this);\n        this.canvas.onmousedown = this.mouseDownHandler.bind(this);\n        this.canvas.onmousemove = this.mouseMoveHandler.bind(this);\n    }\n\n    mouseUpHandler(e) {\n        this.mouseDown = false;\n    }\n\n    mouseDownHandler(e) {\n        this.mouseDown = true;\n        this.ctx.beginPath(); // говорить про те що ми почали малювати нову лінію\n        this.startX = e.pageX - e.target.offsetLeft; // Вираховує позицію миші по осі X, віднімаючи від неї відстань від краю сторінки до початку канваса.\n        this.startY = e.pageY - e.target.offsetTop; // Аналогічно для осі Y — обчислює вертикальну позицію миші на канвасі.\n        this.saved = this.canvas.toDataURL(); // Зберігаємо зображення з канвасу\n    }\n\n    mouseMoveHandler(e) {\n        if (this.mouseDown) {\n            this.endX = e.pageX - e.target.offsetLeft;\n            this.endY = e.pageY - e.target.offsetTop;\n            this.draw(this.startX, this.startY, this.endX, this.endY);\n        }\n    }\n\n    draw(startX, startY, endX, endY) {\n        const img = new Image();\n        img.src = this.saved\n        // Спрацьовує тоді коли зображення встановлено, асинхронна функція\n        img.onload = () => {\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // Очищаємо канвас від тих фігур які ми намалювали, щоб бачити лише поточний обєкт\n            this.ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height); // Через те що ми очищаємо весь канвас, нам потрібно повернути старі малюнки,тому ми зберіг img\n            this.ctx.beginPath(); // говорить про те що ми почали малювати нову лінію\n            this.ctx.moveTo(startX,startY); // встановлюємо початкову точку\n            this.ctx.lineTo(endX, endY); // визначаємо останню точку\n            this.ctx.stroke(); // малюємо лінію\n        }\n    }\n}\n\n// у цьому класі дії приблизно такі самі з нажиманням на кнопки, тільки різниця в муві і обчисленні того, що ми робимо\n// спершу коли ми нажимаємо на кнопку отримаємо початкові координати курсора\n// потім коли рухаємо рахується координати current ( поточні ) , обчислюємо різницю і це буде висотою та шириною відповідно\n// та передаємо їх у функцію draw, де вона приймає x y w h та малює наш прямокутник, заповнює та малює контур, за це відповідає stroke\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,QAAQ;AAEzB,eAAe,MAAMC,IAAI,SAASD,IAAI,CAAC;EACnCE,WAAWA,CAACC,MAAM,EAAE;IAChB,KAAK,CAACA,MAAM,CAAC;IACb,IAAI,CAACC,MAAM,CAAC,CAAC;EACjB;EAEAA,MAAMA,CAAA,EAAG;IACL,IAAI,CAACD,MAAM,CAACE,SAAS,GAAG,IAAI,CAACC,cAAc,CAACC,IAAI,CAAC,IAAI,CAAC;IACtD,IAAI,CAACJ,MAAM,CAACK,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAACF,IAAI,CAAC,IAAI,CAAC;IAC1D,IAAI,CAACJ,MAAM,CAACO,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAACJ,IAAI,CAAC,IAAI,CAAC;EAC9D;EAEAD,cAAcA,CAACM,CAAC,EAAE;IACd,IAAI,CAACC,SAAS,GAAG,KAAK;EAC1B;EAEAJ,gBAAgBA,CAACG,CAAC,EAAE;IAChB,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,GAAG,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,CAACC,MAAM,GAAGJ,CAAC,CAACK,KAAK,GAAGL,CAAC,CAACM,MAAM,CAACC,UAAU,CAAC,CAAC;IAC7C,IAAI,CAACC,MAAM,GAAGR,CAAC,CAACS,KAAK,GAAGT,CAAC,CAACM,MAAM,CAACI,SAAS,CAAC,CAAC;IAC5C,IAAI,CAACC,KAAK,GAAG,IAAI,CAACpB,MAAM,CAACqB,SAAS,CAAC,CAAC,CAAC,CAAC;EAC1C;EAEAb,gBAAgBA,CAACC,CAAC,EAAE;IAChB,IAAI,IAAI,CAACC,SAAS,EAAE;MAChB,IAAI,CAACY,IAAI,GAAGb,CAAC,CAACK,KAAK,GAAGL,CAAC,CAACM,MAAM,CAACC,UAAU;MACzC,IAAI,CAACO,IAAI,GAAGd,CAAC,CAACS,KAAK,GAAGT,CAAC,CAACM,MAAM,CAACI,SAAS;MACxC,IAAI,CAACK,IAAI,CAAC,IAAI,CAACX,MAAM,EAAE,IAAI,CAACI,MAAM,EAAE,IAAI,CAACK,IAAI,EAAE,IAAI,CAACC,IAAI,CAAC;IAC7D;EACJ;EAEAC,IAAIA,CAACX,MAAM,EAAEI,MAAM,EAAEK,IAAI,EAAEC,IAAI,EAAE;IAC7B,MAAME,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;IACvBD,GAAG,CAACE,GAAG,GAAG,IAAI,CAACP,KAAK;IACpB;IACAK,GAAG,CAACG,MAAM,GAAG,MAAM;MACf,IAAI,CAACjB,GAAG,CAACkB,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC7B,MAAM,CAAC8B,KAAK,EAAE,IAAI,CAAC9B,MAAM,CAAC+B,MAAM,CAAC,CAAC,CAAC;MACjE,IAAI,CAACpB,GAAG,CAACqB,SAAS,CAACP,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAACzB,MAAM,CAAC8B,KAAK,EAAE,IAAI,CAAC9B,MAAM,CAAC+B,MAAM,CAAC,CAAC,CAAC;MACtE,IAAI,CAACpB,GAAG,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC;MACtB,IAAI,CAACD,GAAG,CAACsB,MAAM,CAACpB,MAAM,EAACI,MAAM,CAAC,CAAC,CAAC;MAChC,IAAI,CAACN,GAAG,CAACuB,MAAM,CAACZ,IAAI,EAAEC,IAAI,CAAC,CAAC,CAAC;MAC7B,IAAI,CAACZ,GAAG,CAACwB,MAAM,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC;EACL;AACJ;;AAEA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}